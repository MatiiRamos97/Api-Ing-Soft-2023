// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api_ing_soft.Data;

#nullable disable

namespace api_ing_soft.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231127021234_marti")]
    partial class marti
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Chorifests.Chorifest", b =>
                {
                    b.Property<int>("ChorifestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CantidadAsistentes")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("FinFechaInscripcion")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("InicioFechaInscripcion")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MenuID")
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ChorifestID");

                    b.ToTable("Chorifests");
                });

            modelBuilder.Entity("Menues.Bebida", b =>
                {
                    b.Property<int>("BebidaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Alcoholica")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaFabricacion")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Linea")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("Litros")
                        .HasColumnType("double");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BebidaID");

                    b.ToTable("Bebidas");
                });

            modelBuilder.Entity("Menues.ChoriPan", b =>
                {
                    b.Property<int>("ChoriPanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("EsCarne")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EsPan")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EsVegano")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LLevaAderezo")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LLevaLechuga")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LlevaTomate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ChoriPanID");

                    b.ToTable("Choris");
                });

            modelBuilder.Entity("Menues.Menu", b =>
                {
                    b.Property<int>("MenuID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("BebidaID")
                        .HasColumnType("int");

                    b.Property<int?>("ChoriPanID")
                        .HasColumnType("int");

                    b.Property<int>("ChorifestID")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("MenuID");

                    b.HasIndex("BebidaID");

                    b.HasIndex("ChoriPanID");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Personas.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("PersonaID")
                        .HasColumnType("int");

                    b.HasKey("AdminId");

                    b.HasIndex("PersonaID")
                        .IsUnique();

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Personas.Asistentes", b =>
                {
                    b.Property<int>("AsistenteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Asistio")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ChorifestID")
                        .HasColumnType("int");

                    b.Property<bool>("Pagado")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PersonaID")
                        .HasColumnType("int");

                    b.HasKey("AsistenteID");

                    b.HasIndex("PersonaID")
                        .IsUnique();

                    b.ToTable("Asistentes");
                });

            modelBuilder.Entity("Personas.Persona", b =>
                {
                    b.Property<int>("PersonaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PersonaID");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("Menues.Menu", b =>
                {
                    b.HasOne("Menues.Bebida", "Bebida")
                        .WithMany()
                        .HasForeignKey("BebidaID");

                    b.HasOne("Menues.ChoriPan", "ChoriPan")
                        .WithMany()
                        .HasForeignKey("ChoriPanID");

                    b.Navigation("Bebida");

                    b.Navigation("ChoriPan");
                });

            modelBuilder.Entity("Personas.Admin", b =>
                {
                    b.HasOne("Personas.Persona", null)
                        .WithOne("admin")
                        .HasForeignKey("Personas.Admin", "PersonaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Personas.Asistentes", b =>
                {
                    b.HasOne("Personas.Persona", null)
                        .WithOne("asistentes")
                        .HasForeignKey("Personas.Asistentes", "PersonaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Personas.Persona", b =>
                {
                    b.Navigation("admin");

                    b.Navigation("asistentes");
                });
#pragma warning restore 612, 618
        }
    }
}
